/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Fri Jun 03 15:58:02 CDT 2016
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package com.ipn.mx.modelo.pojos.orm;

import com.ipn.mx.modelo.conexion.Conexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import com.ipn.mx.modelo.pojos.*;
import com.ipn.mx.modelo.dao.ClienteDAO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import javax.imageio.ImageIO;
import static jdk.nashorn.tools.ShellFunctions.input;

public class ClienteDAOImpl implements ClienteDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO cliente ("
        + "idCliente, nombreCliente, apellidoCliente, usuario, contrasena"
        + ") VALUES (?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "idCliente, nombreCliente, apellidoCliente, usuario, contrasena "
        + "FROM cliente WHERE "
        + "idCliente = ?";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE cliente SET "
        + "nombreCliente = ?, apellidoCliente = ?, usuario = ?, contrasena = ? "
        + "WHERE "
        + "idCliente = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM cliente WHERE "
        + "idCliente = ?";

    @Override
    public void create(Cliente bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdcliente());
            ps.setString(2, bean.getNombrecliente());
            ps.setString(3, bean.getApellidocliente());
            ps.setString(4, bean.getUsuario());
            ps.setString(5, bean.getContrasena());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    @Override
    public Cliente load(ClienteKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key.getIdcliente());
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Cliente) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }

    @Override
    public void update(Cliente bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombrecliente());
            ps.setString(2, bean.getApellidocliente());
            ps.setString(3, bean.getUsuario());
            ps.setString(4, bean.getContrasena());
            ps.setInt(5, bean.getIdcliente());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    @Override
    public void delete(ClienteKey key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key.getIdcliente());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    public List<Cliente> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<>();
        while (rs.next()) {
            Cliente bean = new Cliente();
            bean.setIdcliente(rs.getInt("idCliente"));
            bean.setNombrecliente(rs.getString("nombreCliente"));
            bean.setApellidocliente(rs.getString("apellidoCliente"));
            bean.setUsuario(rs.getString("usuario"));
            bean.setContrasena(rs.getString("contrasena"));
            results.add(bean);
        }
        return results;
    }

    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
    
    public static void main(String[] args) throws SQLException, IOException {
        Connection conexion = new Conexion().conectar();
        List<Auto> autos = new AutoDAOImpl().getResults(conexion.createStatement().executeQuery("select * from auto"));
        for (Auto auto : autos) {
            System.out.println(auto.toString());
        }
    }
}